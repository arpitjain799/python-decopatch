<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="0" name="pytest" skips="40" tests="256" time="1.737"><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="14" name="test_doc_add_tag_function[flat_mode=False]" time="0.006899356842041016"><system-out>Help on function add_tag in module decopatch.tests.test_doc:

add_tag(tag=&apos;hi!&apos;)
    Example decorator to add a &apos;tag&apos; attribute to a function.
    :param tag: the &apos;tag&apos; value to set on the decorated function (default &apos;hi!).

None
</system-out></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="14" name="test_doc_add_tag_function[flat_mode=True]" time="0.0031981468200683594"><system-out>Help on function add_tag in module decopatch.tests.test_doc:

add_tag(tag=&apos;hi!&apos;)
    Example decorator to add a &apos;tag&apos; attribute to a function.
    :param tag: the &apos;tag&apos; value to set on the decorated function (default &apos;hi!).

None
</system-out></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="78" name="test_doc_say_hello[nested]" time="0.0051898956298828125"></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="78" name="test_doc_say_hello[flat]" time="0.0049326419830322266"></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="78" name="test_doc_say_hello[double-flat]" time="0.006998538970947266"></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="207" name="test_doc_add_tag_class_and_function[flat_mode=False]" time="0.0022628307342529297"><system-out>Help on function add_tag in module decopatch.tests.test_doc:

add_tag(tag=&apos;hi!&apos;)
    Example decorator to add a &apos;tag&apos; attribute to a function or class. It can be
    used with and without parenthesis, with and without arguments.
    
    :param tag: the &apos;tag&apos; value to set on the decorated item (default &apos;hi!).

None
</system-out></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="207" name="test_doc_add_tag_class_and_function[flat_mode=True]" time="0.0029227733612060547"><system-out>Help on function add_tag in module decopatch.tests.test_doc:

add_tag(tag=&apos;hi!&apos;)
    Example decorator to add a &apos;tag&apos; attribute to a function or class. It can be
    used with and without parenthesis, with and without arguments.
    
    :param tag: the &apos;tag&apos; value to set on the decorated item (default &apos;hi!).

None
</system-out></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="17" name="test_doc_impl_first_tag_mandatory[uses_introspection=True-nested_mode=True]" time="0.01818680763244629"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="17" name="test_doc_impl_first_tag_mandatory[uses_introspection=True-nested_mode=False]" time="0.009376764297485352"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="17" name="test_doc_impl_first_tag_mandatory[uses_introspection=False-nested_mode=True]" time="0.0022253990173339844"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="17" name="test_doc_impl_first_tag_mandatory[uses_introspection=False-nested_mode=False]" time="0.0025756359100341797"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="82" name="test_doc_impl_first_tag_optional" time="0.001990079879760742"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="143" name="test_doc_impl_first_say_hello" time="0.0037755966186523438"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="217" name="test_doc_impl_first_class_tag_mandatory[uses_introspection=True]" time="0.0023925304412841797"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="217" name="test_doc_impl_first_class_tag_mandatory[uses_introspection=False]" time="0.0022644996643066406"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="267" name="test_doc_nested_mode_tag_mandatory" time="0.001592874526977539"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="288" name="test_doc_impl_first_tag_mandatory_protected[uses_introspection=True-kwonly=True]" time="0.004695892333984375"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="288" name="test_doc_impl_first_tag_mandatory_protected[uses_introspection=False-kwonly=True]" time="0.002177715301513672"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="319" name="test_doc_impl_first_tag_optional_nonprotected[kwonly=False]" time="0.002012014389038086"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="319" name="test_doc_impl_first_tag_optional_nonprotected[kwonly=True]" time="0.001667022705078125"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="356" name="test_doc_impl_first_tag_optional_protected[introspection=True-kwonly=False]" time="0.009991168975830078"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="356" name="test_doc_impl_first_tag_optional_protected[introspection=True-kwonly=True]" time="0.0097808837890625"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="356" name="test_doc_impl_first_tag_optional_protected[introspection=False-kwonly=False]" time="0.0024733543395996094"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="356" name="test_doc_impl_first_tag_optional_protected[introspection=False-kwonly=True]" time="0.002574920654296875"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="427" name="test_varpos_and_decorated_before_in_flat_mode" time="0.0035305023193359375"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="463" name="test_kwargs" time="0.0015811920166015625"></testcase><testcase classname="decopatch.tests.test_doc_disambiguation" file="decopatch/tests/test_doc_disambiguation.py" line="9" name="test_no_args[flat_mode=False]" time="0.0035872459411621094"></testcase><testcase classname="decopatch.tests.test_doc_disambiguation" file="decopatch/tests/test_doc_disambiguation.py" line="9" name="test_no_args[flat_mode=True]" time="0.00400853157043457"></testcase><testcase classname="decopatch.tests.test_doc_disambiguation" file="decopatch/tests/test_doc_disambiguation.py" line="67" name="test_mandatory_kwargs[flat_mode=False]" time="0.002305746078491211"><system-out>Help on function replace_with in module decopatch.main:

replace_with(*, replacement)
    Decorator to replace anything with the &lt;replacement&gt; object.

</system-out></testcase><testcase classname="decopatch.tests.test_doc_disambiguation" file="decopatch/tests/test_doc_disambiguation.py" line="67" name="test_mandatory_kwargs[flat_mode=True]" time="0.0022554397583007812"><system-out>Help on function replace_with in module decopatch.main:

replace_with(*, replacement)
    Decorator to replace anything with the &lt;replacement&gt; object.

</system-out></testcase><testcase classname="decopatch.tests.test_doc_disambiguation" file="decopatch/tests/test_doc_disambiguation.py" line="91" name="test_optional_kwargs[flat_mode=False]" time="0.0019121170043945312"><system-out>Help on function replace_with in module decopatch.tests._test_doc_py3:

replace_with(*, replacement=&apos;hello&apos;)
    Decorator to replace anything with the &lt;replacement&gt; object.

</system-out></testcase><testcase classname="decopatch.tests.test_doc_disambiguation" file="decopatch/tests/test_doc_disambiguation.py" line="91" name="test_optional_kwargs[flat_mode=True]" time="0.002447366714477539"><system-out>Help on function replace_with in module decopatch.tests._test_doc_py3:

replace_with(*, replacement=&apos;hello&apos;)
    Decorator to replace anything with the &lt;replacement&gt; object.

</system-out></testcase><testcase classname="decopatch.tests.test_introspection" file="decopatch/tests/test_introspection.py" line="3" name="test_on_functions" time="0.008816242218017578"></testcase><testcase classname="decopatch.tests.test_issues" file="decopatch/tests/test_issues.py" line="5" name="test_notnamed_flat_mode_varpositional[position=0]" time="0.0022766590118408203"></testcase><testcase classname="decopatch.tests.test_issues" file="decopatch/tests/test_issues.py" line="5" name="test_notnamed_flat_mode_varpositional[position=1]" time="0.0017845630645751953"></testcase><testcase classname="decopatch.tests.test_issues" file="decopatch/tests/test_issues.py" line="26" name="test_named_flat_mode_varpositional[position=0]" time="0.002014636993408203"></testcase><testcase classname="decopatch.tests.test_issues" file="decopatch/tests/test_issues.py" line="26" name="test_named_flat_mode_varpositional[position=1]" time="0.002103567123413086"></testcase><testcase classname="decopatch.tests.test_issues" file="decopatch/tests/test_issues.py" line="48" name="test_disambiguation_during_binding" time="0.0015172958374023438"></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo]" time="0.0020551681518554688"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo()]" time="0.00183868408203125"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(goo)]" time="0.001737833023071289"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;NotADecoratorError&apos; because We are not able to disambiguate but hopefully users will realize

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(&apos;hello&apos;)]" time="0.0020380020141601562"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because we correctly disambiguate by default since the argument is non-callable

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0036063194274902344"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because we correctly disambiguate by default since the argument is non-callable

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(replacement=goo)]" time="0.0019259452819824219"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(replacement=goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0019583702087402344"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.001653432846069336"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0018236637115478516"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0020139217376708984"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0019445419311523438"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0021355152130126953"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo]" time="0.0025391578674316406"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo()]" time="0.0022292137145996094"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(goo)]" time="0.0023458003997802734"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;NotADecoratorError&apos; because We are not able to disambiguate but hopefully users will realize

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(&apos;hello&apos;)]" time="0.005761146545410156"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because we correctly disambiguate by default since the argument is non-callable

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0015578269958496094"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because we correctly disambiguate by default since the argument is non-callable

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(replacement=goo)]" time="0.002370595932006836"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(replacement=goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0021114349365234375"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0023293495178222656"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0026807785034179688"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.002407073974609375"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.002393960952758789"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0022051334381103516"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo]" time="0.0019807815551757812"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo()]" time="0.00218963623046875"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(goo)]" time="0.002300739288330078"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;NotADecoratorError&apos; because We are not able to disambiguate but hopefully users will realize

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(&apos;hello&apos;)]" time="0.002172708511352539"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0026617050170898438"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(replacement=goo)]" time="0.001980304718017578"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(replacement=goo)
Expected ERROR: &apos;TypeError&apos; because decorator impl does not accept keyword args

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.002734661102294922"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because decorator impl does not accept keyword args

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.002675771713256836"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because decorator impl does not accept keyword args

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0026199817657470703"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0025305747985839844"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0017733573913574219"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0029404163360595703"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo]" time="0.0026595592498779297"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo
Expected ERROR: &apos;InvalidMandatoryArgError&apos; because a no-parenthesis usage will be declared by the default disambiguator or the stack introspecter as decorated target

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo()]" time="0.0024847984313964844"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo()
Expected ERROR: &apos;TypeError&apos; because python does not allow f() if f has 1 mandatory arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(goo)]" time="0.002503633499145508"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;InvalidMandatoryArgError&apos; because calling with a single positional callablewill be declared by the default disambiguator or the stack introspecter as decorated target, andtherefore it will say that there is something missing

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(&apos;hello&apos;)]" time="0.0016224384307861328"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0022728443145751953"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(replacement=goo)]" time="0.0027387142181396484"><skipped message="decorator impl does not have a &apos;replacement&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c8645e10&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(replacement=goo)
</system-out><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(replacement=goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0028374195098876953"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0034377574920654297"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0019173622131347656"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0026636123657226562"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.002668142318725586"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0027637481689453125"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo]" time="0.005934476852416992"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo
Expected ERROR: &apos;InvalidMandatoryArgError&apos; because a no-parenthesis usage will be declared by the default disambiguator or the stack introspecter as decorated target

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo()]" time="0.002688884735107422"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo()
Expected ERROR: &apos;TypeError&apos; because python does not allow f() if f has 1 mandatory arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(goo)]" time="0.009489774703979492"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;AssertionError&apos; because The stack introspector will work correctly. So the decorated functionwill be replaced by foo. Which is not`goo`

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(&apos;hello&apos;)]" time="0.001768350601196289"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.002489328384399414"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(replacement=goo)]" time="0.0012841224670410156"><skipped message="decorator impl does not have a &apos;replacement&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c85eee10&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(replacement=goo)
</system-out><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(replacement=goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0025424957275390625"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0025005340576171875"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0027463436126708984"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0019989013671875"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.002668619155883789"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.002547740936279297"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo]" time="0.002618074417114258"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo
Expected ERROR: &apos;InvalidMandatoryArgError&apos; because using the decorator without parenthesis mimics usage with a single arg.

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo()]" time="0.0020856857299804688"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo()
Expected ERROR: &apos;TypeError&apos; because python does not allow f() if f has 1 mandatory arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(goo)]" time="0.0019173622131347656"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;InvalidMandatoryArgError&apos; because calling a decorator with a callable as first and only non-default argument leads by default to an error

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(&apos;hello&apos;)]" time="0.002394437789916992"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c8607978&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0028324127197265625"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c86077b8&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(replacement=goo)]" time="0.002649068832397461"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.001817941665649414"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c860b780&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0020189285278320312"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c86113c8&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.002985239028930664"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0023775100708007812"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.002482891082763672"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0018458366394042969"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo]" time="0.002177715301513672"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo
Expected ERROR: &apos;InvalidMandatoryArgError&apos; because a no-parenthesis usage will be declared by the disambiguator as decorated target

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo()]" time="0.002453327178955078"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo()
Expected ERROR: &apos;TypeError&apos; because python does not allow f() if f has 1 mandatory arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(goo)]" time="0.0039958953857421875"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(&apos;hello&apos;)]" time="0.002391815185546875"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c8615b38&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.00213623046875"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c86154e0&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(replacement=goo)]" time="0.0024302005767822266"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.002460002899169922"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c861b940&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0024878978729248047"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c861e588&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0022199153900146484"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.002107381820678711"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0027298927307128906"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0024971961975097656"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo]" time="0.0022864341735839844"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo
Expected ERROR: &apos;InvalidMandatoryArgError&apos; because using the decorator without parenthesis mimics usage with a single arg.

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo()]" time="0.001967906951904297"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo()
Expected ERROR: &apos;TypeError&apos; because python does not allow f() if f has 1 mandatory arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(goo)]" time="0.0022554397583007812"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;InvalidMandatoryArgError&apos; because calling a decorator with a callable as first and only non-default argument leads by default to an error

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(&apos;hello&apos;)]" time="0.0025756359100341797"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c8625cf8&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0044438838958740234"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c86256a0&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(replacement=goo)]" time="0.0021724700927734375"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0017914772033691406"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c8629940&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0020046234130859375"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c862c518&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.006903886795043945"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.012213706970214844"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0019545555114746094"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0033686161041259766"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo]" time="0.002181529998779297"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo
Expected ERROR: &apos;InvalidMandatoryArgError&apos; because a no-parenthesis usage will be declared by the disambiguator as decorated target

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo()]" time="0.0021114349365234375"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo()
Expected ERROR: &apos;TypeError&apos; because python does not allow f() if f has 1 mandatory arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(goo)]" time="0.0019745826721191406"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(&apos;hello&apos;)]" time="0.0019845962524414062"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c85b1b38&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.002282857894897461"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c85b19b0&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(replacement=goo)]" time="0.001825571060180664"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0018756389617919922"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c85b8898&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0019626617431640625"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c85bd4e0&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0024404525756835938"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0020864009857177734"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.002125263214111328"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0019767284393310547"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo]" time="0.0017580986022949219"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo()]" time="0.002062082290649414"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo()
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(goo)]" time="0.0021162033081054688"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(&apos;hello&apos;)]" time="0.002089262008666992"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0021915435791015625"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(replacement=goo)]" time="0.0021419525146484375"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(replacement=goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0018727779388427734"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0020911693572998047"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0019927024841308594"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0020651817321777344"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c85cb0f0&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0020318031311035156"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.001739501953125"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c85d0240&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo]" time="0.0020499229431152344"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo()]" time="0.0020630359649658203"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo()
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(goo)]" time="0.002103567123413086"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(&apos;hello&apos;)]" time="0.0021097660064697266"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.002126932144165039"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(replacement=goo)]" time="0.0017018318176269531"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(replacement=goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.002093076705932617"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0020766258239746094"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.002262115478515625"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c85d0ef0&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0020020008087158203"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0018999576568603516"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c85e6240&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.001873016357421875"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo]" time="0.0021703243255615234"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo()]" time="0.0022420883178710938"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo()
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(goo)]" time="0.002366304397583008"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(&apos;hello&apos;)]" time="0.002042531967163086"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0017216205596923828"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(replacement=goo)]" time="0.0020949840545654297"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(replacement=goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.002104520797729492"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0020775794982910156"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0019843578338623047"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0020055770874023438"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.001676797866821289"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.002186298370361328"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo]" time="0.0020132064819335938"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo()]" time="0.001999378204345703"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(goo)]" time="0.0021228790283203125"><skipped message="the first positional arg is supposed not to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c857a2e8&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo)
</system-out><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(&apos;hello&apos;)]" time="0.0018339157104492188"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.001743316650390625"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(replacement=goo)]" time="0.0020017623901367188"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0022482872009277344"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.002025127410888672"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0019941329956054688"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c8581470&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0017044544219970703"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.002038240432739258"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c8587b70&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.002081155776977539"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo]" time="0.006345987319946289"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo()]" time="0.0019371509552001953"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(goo)]" time="0.00170135498046875"><skipped message="the first positional arg is supposed not to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c8589240&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo)
</system-out><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(&apos;hello&apos;)]" time="0.0020935535430908203"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0020749568939208984"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(replacement=goo)]" time="0.002080678939819336"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0024390220642089844"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0018107891082763672"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.001786947250366211"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c8591b00&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0020105838775634766"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0020818710327148438"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c8597cc0&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.002044677734375"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo]" time="0.003795146942138672"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo()]" time="0.001753091812133789"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(goo)]" time="0.0022885799407958984"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;NotADecoratorError&apos; because No explicit exception is raised but since a double-call is made, user will probably realize that something is wrong

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(&apos;hello&apos;)]" time="0.0022683143615722656"><skipped message="the first positional arg is supposed to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c85d8668&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0021746158599853516"><skipped message="the first positional arg is supposed to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c8599748&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(replacement=goo)]" time="0.001794576644897461"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0024988651275634766"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0020322799682617188"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0020432472229003906"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0021162033081054688"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c859e518&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0018589496612548828"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.001817941665649414"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c85a4668&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo]" time="0.006485939025878906"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo()]" time="0.0020792484283447266"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(goo)]" time="0.005889177322387695"><system-out>
Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(&apos;hello&apos;)]" time="0.0020568370819091797"><skipped message="the first positional arg is supposed to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c8530128&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.002420186996459961"><skipped message="the first positional arg is supposed to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c85a4278&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(replacement=goo)]" time="0.0020308494567871094"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.002056598663330078"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0018715858459472656"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0017693042755126953"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.002046346664428711"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c85adf98&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.002377748489379883"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.002042531967163086"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c8591080&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo]" time="0.002114534378051758"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo()]" time="0.0016579627990722656"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(goo)]" time="0.0018773078918457031"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(&apos;hello&apos;)]" time="0.0021038055419921875"><skipped message="the first positional arg is supposed to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c8539e80&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0013659000396728516"><skipped message="the first positional arg is supposed to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c8539390&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(replacement=goo)]" time="0.0019266605377197266"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0018382072448730469"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0018925666809082031"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0020313262939453125"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.002328634262084961"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c8544748&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.002032756805419922"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.002057313919067383"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7f92c8544160&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="15" name="test_so_flat" time="0.0019505023956298828"><system-out>hello from before run
a -1 b 2
hello from before run
a 100 b 2
</system-out></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="40" name="test_so_double_flat" time="0.002238035202026367"><system-out>hello from before run
a -1 b 2
hello from before run
a 100 b 2
</system-out></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="62" name="test_so_wrap[style=flat]" time="0.0028536319732666016"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="62" name="test_so_wrap[style=double-flat]" time="0.0031728744506835938"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="100" name="test_so_2[mode=flat]" time="0.002707958221435547"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="100" name="test_so_2[mode=double-flat]" time="0.0021867752075195312"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="144" name="test_so_3[mode=flat]" time="0.004658937454223633"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="144" name="test_so_3[mode=double-flat]" time="0.007969856262207031"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="189" name="test_so_4[mode=None]" time="0.010133028030395508"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="189" name="test_so_4[mode=flat]" time="0.0037178993225097656"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="309" name="test_so_5[mode=no-deco]" time="0.008278131484985352"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="309" name="test_so_5[mode=None]" time="0.007155895233154297"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="309" name="test_so_5[mode=flat]" time="0.009454011917114258"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="387" name="test_so_6" time="0.003070831298828125"></testcase></testsuite>