<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="0" name="pytest" skips="39" tests="209" time="1.570"><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="14" name="test_doc_impl_first_tag_mandatory[uses_introspection=True-usage_first=True]" time="0.017287254333496094"></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="14" name="test_doc_impl_first_tag_mandatory[uses_introspection=True-usage_first=False]" time="0.012204647064208984"></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="14" name="test_doc_impl_first_tag_mandatory[uses_introspection=False-usage_first=True]" time="0.0040433406829833984"></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="14" name="test_doc_impl_first_tag_mandatory[uses_introspection=False-usage_first=False]" time="0.0027735233306884766"></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="79" name="test_doc_impl_first_tag_optional" time="0.023807764053344727"></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="132" name="test_doc_impl_first_say_hello" time="0.011560916900634766"></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="205" name="test_doc_impl_first_class_tag_mandatory[True]" time="0.013139486312866211"></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="205" name="test_doc_impl_first_class_tag_mandatory[False]" time="0.0026979446411132812"></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="255" name="test_doc_usage_first_tag_mandatory" time="0.0024132728576660156"></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="277" name="test_doc_impl_first_tag_mandatory_protected[uses_introspection=True-kwonly=True]" time="0.00421142578125"></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="277" name="test_doc_impl_first_tag_mandatory_protected[uses_introspection=False-kwonly=True]" time="0.002896547317504883"></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="309" name="test_doc_impl_first_tag_optional_nonprotected[kwonly=False]" time="0.0016939640045166016"></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="309" name="test_doc_impl_first_tag_optional_nonprotected[kwonly=True]" time="0.002089977264404297"></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="346" name="test_doc_impl_first_tag_optional_protected[introspection=True-kwonly=False]" time="0.02013874053955078"></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="346" name="test_doc_impl_first_tag_optional_protected[introspection=True-kwonly=True]" time="0.01429128646850586"></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="346" name="test_doc_impl_first_tag_optional_protected[introspection=False-kwonly=False]" time="0.0036563873291015625"></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="346" name="test_doc_impl_first_tag_optional_protected[introspection=False-kwonly=True]" time="0.003170013427734375"></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_0_args(f=DECORATED)-@replace_by_foo]" time="0.002410888671875"><system-out>Generated decorator : replace_by_foo(*no_args)
Calling it as @replace_by_foo
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_0_args(f=DECORATED)-@replace_by_foo()]" time="0.0031189918518066406"><system-out>Generated decorator : replace_by_foo(*no_args)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_0_args(f=DECORATED)-@replace_by_foo(goo)]" time="0.003612518310546875"><system-out>Generated decorator : replace_by_foo(*no_args)
Calling it as @replace_by_foo(goo)
Expected error: &apos;TypeError&apos; because python does not allow f(x) if f has 0 args

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_0_args(f=DECORATED)-@replace_by_foo(&apos;hello&apos;)]" time="0.0028977394104003906"><system-out>Generated decorator : replace_by_foo(*no_args)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected error: &apos;TypeError&apos; because python does not allow f(x) if f has 0 args

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_0_args(f=DECORATED)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.002610445022583008"><system-out>Generated decorator : replace_by_foo(*no_args)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected error: &apos;TypeError&apos; because python does not allow f(x) if f has 0 args

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_0_args(f=DECORATED)-@replace_by_foo(replacement=goo)]" time="0.002356290817260742"><system-out>Generated decorator : replace_by_foo(*no_args)
Calling it as @replace_by_foo(replacement=goo)
Expected error: &apos;TypeError&apos; because python does not allow f(x) if f has 0 args

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_0_args(f=DECORATED)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.004498720169067383"><system-out>Generated decorator : replace_by_foo(*no_args)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected error: &apos;TypeError&apos; because python does not allow f(x) if f has 0 args

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_0_args(f=DECORATED)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0031044483184814453"><system-out>Generated decorator : replace_by_foo(*no_args)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected error: &apos;TypeError&apos; because python does not allow f(x) if f has 0 args

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_0_args(f=DECORATED)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0017199516296386719"><system-out>Generated decorator : replace_by_foo(*no_args)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected error: &apos;TypeError&apos; because python does not allow f(x) if f has 0 args

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_0_args(f=DECORATED)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0022161006927490234"><system-out>Generated decorator : replace_by_foo(*no_args)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected error: &apos;TypeError&apos; because python does not allow f(x) if f has 0 args

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_0_args(f=DECORATED)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0037741661071777344"><system-out>Generated decorator : replace_by_foo(*no_args)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected error: &apos;TypeError&apos; because python does not allow f(x) if f has 0 args

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_0_args(f=DECORATED)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0030918121337890625"><system-out>Generated decorator : replace_by_foo(*no_args)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected error: &apos;TypeError&apos; because python does not allow f(x) if f has 0 args

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_0_args(*, f=DECORATED)-@replace_by_foo]" time="0.0027425289154052734"><system-out>Generated decorator : replace_by_foo(*no_args)
Calling it as @replace_by_foo
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_0_args(*, f=DECORATED)-@replace_by_foo()]" time="0.0019218921661376953"><system-out>Generated decorator : replace_by_foo(*no_args)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_0_args(*, f=DECORATED)-@replace_by_foo(goo)]" time="0.0033464431762695312"><system-out>Generated decorator : replace_by_foo(*no_args)
Calling it as @replace_by_foo(goo)
Expected error: &apos;TypeError&apos; because python does not allow f(x) if f has 0 args

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_0_args(*, f=DECORATED)-@replace_by_foo(&apos;hello&apos;)]" time="0.002957582473754883"><system-out>Generated decorator : replace_by_foo(*no_args)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected error: &apos;TypeError&apos; because python does not allow f(x) if f has 0 args

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_0_args(*, f=DECORATED)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0031328201293945312"><system-out>Generated decorator : replace_by_foo(*no_args)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected error: &apos;TypeError&apos; because python does not allow f(x) if f has 0 args

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_0_args(*, f=DECORATED)-@replace_by_foo(replacement=goo)]" time="0.002489328384399414"><system-out>Generated decorator : replace_by_foo(*no_args)
Calling it as @replace_by_foo(replacement=goo)
Expected error: &apos;TypeError&apos; because python does not allow f(x) if f has 0 args

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_0_args(*, f=DECORATED)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.002762317657470703"><system-out>Generated decorator : replace_by_foo(*no_args)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected error: &apos;TypeError&apos; because python does not allow f(x) if f has 0 args

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_0_args(*, f=DECORATED)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.002994060516357422"><system-out>Generated decorator : replace_by_foo(*no_args)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected error: &apos;TypeError&apos; because python does not allow f(x) if f has 0 args

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_0_args(*, f=DECORATED)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.003157377243041992"><system-out>Generated decorator : replace_by_foo(*no_args)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected error: &apos;TypeError&apos; because python does not allow f(x) if f has 0 args

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_0_args(*, f=DECORATED)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0033044815063476562"><system-out>Generated decorator : replace_by_foo(*no_args)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected error: &apos;TypeError&apos; because python does not allow f(x) if f has 0 args

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_0_args(*, f=DECORATED)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0030956268310546875"><system-out>Generated decorator : replace_by_foo(*no_args)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected error: &apos;TypeError&apos; because python does not allow f(x) if f has 0 args

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_0_args(*, f=DECORATED)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.005227565765380859"><system-out>Generated decorator : replace_by_foo(*no_args)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected error: &apos;TypeError&apos; because python does not allow f(x) if f has 0 args

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[case_hard_varpositional-@replace_by_foo]" time="0.002507448196411133"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo
Expected error: &apos;AmbiguousFirstArgumentTypeError&apos; because using the decorator without parenthesis mimics usage with a single arg.

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[case_hard_varpositional-@replace_by_foo()]" time="0.0029854774475097656"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[case_hard_varpositional-@replace_by_foo(goo)]" time="0.003399372100830078"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(goo)
Expected error: &apos;AmbiguousFirstArgumentTypeError&apos; because calling a non-protected decorator with a callable leads to an error

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[case_hard_varpositional-@replace_by_foo(&apos;hello&apos;)]" time="0.0030815601348876953"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[case_hard_varpositional-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.002640247344970703"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[case_hard_varpositional-@replace_by_foo(replacement=goo)]" time="0.002620220184326172"><skipped message="decorator impl does not accept keyword args" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f8943981400&gt;</skipped><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(replacement=goo)
</system-out><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(replacement=goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[case_hard_varpositional-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.005484342575073242"><skipped message="decorator impl does not accept keyword args" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f8943981f98&gt;</skipped><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[case_hard_varpositional-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.002874135971069336"><skipped message="decorator impl does not accept keyword args" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f89439ea208&gt;</skipped><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[case_hard_varpositional-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0024073123931884766"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[case_hard_varpositional-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.002688884735107422"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[case_hard_varpositional-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0029973983764648438"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[case_hard_varpositional-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0032591819763183594"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_1m_arg(dummy, f=DECORATED)-@replace_by_foo]" time="0.00497746467590332"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo
Expected error: &apos;AmbiguousFirstArgumentTypeError&apos; because using the decorator without parenthesis mimics usage with a single arg.

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_1m_arg(dummy, f=DECORATED)-@replace_by_foo()]" time="0.0023407936096191406"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo()
Expected error: &apos;TypeError&apos; because python does not allow f() if f has 1 mandatory arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_1m_arg(dummy, f=DECORATED)-@replace_by_foo(goo)]" time="0.002850055694580078"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(goo)
Expected error: &apos;AmbiguousFirstArgumentTypeError&apos; because calling a non-protected decorator with a callable leads to an error

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_1m_arg(dummy, f=DECORATED)-@replace_by_foo(&apos;hello&apos;)]" time="0.002804279327392578"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_1m_arg(dummy, f=DECORATED)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.002750396728515625"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_1m_arg(dummy, f=DECORATED)-@replace_by_foo(replacement=goo)]" time="0.002237558364868164"><skipped message="decorator impl does not have a &apos;replacement&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f8943998dd8&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(replacement=goo)
</system-out><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(replacement=goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_1m_arg(dummy, f=DECORATED)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.002819538116455078"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_1m_arg(dummy, f=DECORATED)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.003055572509765625"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_1m_arg(dummy, f=DECORATED)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.002930879592895508"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected error: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_1m_arg(dummy, f=DECORATED)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0021266937255859375"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected error: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_1m_arg(dummy, f=DECORATED)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0028977394104003906"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected error: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_1m_arg(dummy, f=DECORATED)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.00289154052734375"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected error: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(dummy, f=DECORATED)-@replace_by_foo]" time="0.0035278797149658203"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo
Expected error: &apos;InvalidMandatoryArgError&apos; because a no-parenthesis usage will be declared by the disambiguator as decorated target

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(dummy, f=DECORATED)-@replace_by_foo()]" time="0.002347230911254883"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo()
Expected error: &apos;TypeError&apos; because python does not allow f() if f has 1 mandatory arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(dummy, f=DECORATED)-@replace_by_foo(goo)]" time="0.0026459693908691406"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(goo)
Expected error: &apos;InvalidMandatoryArgError&apos; because calling with a single positional callablewill be declared by the disambiguator as decorated target

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(dummy, f=DECORATED)-@replace_by_foo(&apos;hello&apos;)]" time="0.0027959346771240234"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(dummy, f=DECORATED)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0030798912048339844"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(dummy, f=DECORATED)-@replace_by_foo(replacement=goo)]" time="0.0029001235961914062"><skipped message="decorator impl does not have a &apos;replacement&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f894392e588&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(replacement=goo)
</system-out><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(replacement=goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(dummy, f=DECORATED)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.002490520477294922"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(dummy, f=DECORATED)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.003881692886352539"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(dummy, f=DECORATED)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0035860538482666016"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected error: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(dummy, f=DECORATED)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0028913021087646484"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected error: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(dummy, f=DECORATED)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0025336742401123047"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected error: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(dummy, f=DECORATED)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0034749507904052734"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected error: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(replacement, f=DECORATED)_kwonly=False-@replace_by_foo]" time="0.0037033557891845703"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo
Expected error: &apos;InvalidMandatoryArgError&apos; because using the decorator without parenthesis mimics usage with a single arg.

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(replacement, f=DECORATED)_kwonly=False-@replace_by_foo()]" time="0.004835605621337891"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo()
Expected error: &apos;TypeError&apos; because python does not allow f() if f has 1 mandatory arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(replacement, f=DECORATED)_kwonly=False-@replace_by_foo(goo)]" time="0.0029113292694091797"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo)
Expected error: &apos;InvalidMandatoryArgError&apos; because calling a decorator with a callable as first and only non-default argument leads by default to an error

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(replacement, f=DECORATED)_kwonly=False-@replace_by_foo(&apos;hello&apos;)]" time="0.0034716129302978516"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f894397b908&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(replacement, f=DECORATED)_kwonly=False-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0036034584045410156"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f89439386d8&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(replacement, f=DECORATED)_kwonly=False-@replace_by_foo(replacement=goo)]" time="0.0030753612518310547"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(replacement=goo)
Expected error: &apos;InvalidMandatoryArgError&apos; because calling a decorator with a callable as first and only non-default argument leads by default to an error

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(replacement, f=DECORATED)_kwonly=False-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0060846805572509766"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f8943985048&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(replacement, f=DECORATED)_kwonly=False-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0027751922607421875"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f894393b198&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(replacement, f=DECORATED)_kwonly=False-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.002835512161254883"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected error: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(replacement, f=DECORATED)_kwonly=False-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0025031566619873047"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected error: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(replacement, f=DECORATED)_kwonly=False-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.003395557403564453"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected error: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(replacement, f=DECORATED)_kwonly=False-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0030100345611572266"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected error: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(replacement, f=DECORATED)_kwonly=True-@replace_by_foo]" time="0.002942800521850586"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo
Expected error: &apos;InvalidMandatoryArgError&apos; because using the decorator without parenthesis mimics usage with a single arg.

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(replacement, f=DECORATED)_kwonly=True-@replace_by_foo()]" time="0.0021500587463378906"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo()
Expected error: &apos;TypeError&apos; because python does not allow f() if f has 1 mandatory arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(replacement, f=DECORATED)_kwonly=True-@replace_by_foo(goo)]" time="0.002938985824584961"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo)
Expected error: &apos;InvalidMandatoryArgError&apos; because calling a decorator with a callable as first and only non-default argument leads by default to an error

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(replacement, f=DECORATED)_kwonly=True-@replace_by_foo(&apos;hello&apos;)]" time="0.0028815269470214844"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f894393ee10&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(replacement, f=DECORATED)_kwonly=True-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.004953861236572266"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f894393eba8&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(replacement, f=DECORATED)_kwonly=True-@replace_by_foo(replacement=goo)]" time="0.0021774768829345703"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(replacement=goo)
Expected error: &apos;InvalidMandatoryArgError&apos; because calling a decorator with a callable as first and only non-default argument leads by default to an error

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(replacement, f=DECORATED)_kwonly=True-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.002348184585571289"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f8943943d30&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(replacement, f=DECORATED)_kwonly=True-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0023720264434814453"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f8943949908&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(replacement, f=DECORATED)_kwonly=True-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0028023719787597656"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected error: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(replacement, f=DECORATED)_kwonly=True-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.002430438995361328"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected error: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(replacement, f=DECORATED)_kwonly=True-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0021479129791259766"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected error: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(default)_1m_arg(replacement, f=DECORATED)_kwonly=True-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0024063587188720703"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected error: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_1m_arg(replacement, f=DECORATED)_kwonly=False-@replace_by_foo]" time="0.0025649070739746094"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo
Expected error: &apos;InvalidMandatoryArgError&apos; because a no-parenthesis usage will be declared by the disambiguator as decorated target

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_1m_arg(replacement, f=DECORATED)_kwonly=False-@replace_by_foo()]" time="0.002415180206298828"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo()
Expected error: &apos;TypeError&apos; because python does not allow f() if f has 1 mandatory arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_1m_arg(replacement, f=DECORATED)_kwonly=False-@replace_by_foo(goo)]" time="0.002476215362548828"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_1m_arg(replacement, f=DECORATED)_kwonly=False-@replace_by_foo(&apos;hello&apos;)]" time="0.002383708953857422"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f8943949438&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_1m_arg(replacement, f=DECORATED)_kwonly=False-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0023674964904785156"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f8943953be0&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_1m_arg(replacement, f=DECORATED)_kwonly=False-@replace_by_foo(replacement=goo)]" time="0.002357959747314453"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_1m_arg(replacement, f=DECORATED)_kwonly=False-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.002366781234741211"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f8943958cc0&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_1m_arg(replacement, f=DECORATED)_kwonly=False-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.002341747283935547"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f8943953b38&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_1m_arg(replacement, f=DECORATED)_kwonly=False-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0021669864654541016"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected error: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_1m_arg(replacement, f=DECORATED)_kwonly=False-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.002446413040161133"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected error: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_1m_arg(replacement, f=DECORATED)_kwonly=False-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0025391578674316406"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected error: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_1m_arg(replacement, f=DECORATED)_kwonly=False-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0024683475494384766"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected error: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_1m_arg(replacement, f=DECORATED)_kwonly=True-@replace_by_foo]" time="0.0028676986694335938"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo
Expected error: &apos;InvalidMandatoryArgError&apos; because a no-parenthesis usage will be declared by the disambiguator as decorated target

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_1m_arg(replacement, f=DECORATED)_kwonly=True-@replace_by_foo()]" time="0.002049684524536133"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo()
Expected error: &apos;TypeError&apos; because python does not allow f() if f has 1 mandatory arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_1m_arg(replacement, f=DECORATED)_kwonly=True-@replace_by_foo(goo)]" time="0.002285003662109375"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_1m_arg(replacement, f=DECORATED)_kwonly=True-@replace_by_foo(&apos;hello&apos;)]" time="0.002325296401977539"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f894396b2b0&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_1m_arg(replacement, f=DECORATED)_kwonly=True-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0027735233306884766"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f894396bf60&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_1m_arg(replacement, f=DECORATED)_kwonly=True-@replace_by_foo(replacement=goo)]" time="0.002393960952758789"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_1m_arg(replacement, f=DECORATED)_kwonly=True-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.002000093460083008"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f8943962f60&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_1m_arg(replacement, f=DECORATED)_kwonly=True-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.004612445831298828"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f89438efb00&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_1m_arg(replacement, f=DECORATED)_kwonly=True-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0025060176849365234"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected error: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_1m_arg(replacement, f=DECORATED)_kwonly=True-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.002683877944946289"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected error: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_1m_arg(replacement, f=DECORATED)_kwonly=True-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0024704933166503906"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected error: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_1m_arg(replacement, f=DECORATED)_kwonly=True-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.002445697784423828"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected error: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(replacement, dummy, f=DECORATED)-@replace_by_foo]" time="0.0025548934936523438"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo
Expected error: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(replacement, dummy, f=DECORATED)-@replace_by_foo()]" time="0.0025305747985839844"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo()
Expected error: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(replacement, dummy, f=DECORATED)-@replace_by_foo(goo)]" time="0.002355813980102539"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(goo)
Expected error: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(replacement, dummy, f=DECORATED)-@replace_by_foo(&apos;hello&apos;)]" time="0.002416372299194336"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected error: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(replacement, dummy, f=DECORATED)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0028455257415771484"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected error: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(replacement, dummy, f=DECORATED)-@replace_by_foo(replacement=goo)]" time="0.002422332763671875"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(replacement=goo)
Expected error: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(replacement, dummy, f=DECORATED)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.002501249313354492"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected error: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(replacement, dummy, f=DECORATED)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0022933483123779297"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected error: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(replacement, dummy, f=DECORATED)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0023224353790283203"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(replacement, dummy, f=DECORATED)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0024940967559814453"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f89439032b0&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(replacement, dummy, f=DECORATED)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0029015541076660156"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(replacement, dummy, f=DECORATED)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0024564266204833984"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f89439037b8&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(dummy, replacement, f=DECORATED)-@replace_by_foo]" time="0.0022966861724853516"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo
Expected error: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(dummy, replacement, f=DECORATED)-@replace_by_foo()]" time="0.0023894309997558594"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo()
Expected error: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(dummy, replacement, f=DECORATED)-@replace_by_foo(goo)]" time="0.002485036849975586"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(goo)
Expected error: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(dummy, replacement, f=DECORATED)-@replace_by_foo(&apos;hello&apos;)]" time="0.002463102340698242"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected error: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(dummy, replacement, f=DECORATED)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.004058361053466797"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected error: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(dummy, replacement, f=DECORATED)-@replace_by_foo(replacement=goo)]" time="0.002244710922241211"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(replacement=goo)
Expected error: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(dummy, replacement, f=DECORATED)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0023813247680664062"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected error: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(dummy, replacement, f=DECORATED)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0065958499908447266"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected error: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(dummy, replacement, f=DECORATED)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0015902519226074219"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f8943949550&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(dummy, replacement, f=DECORATED)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.002504587173461914"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(dummy, replacement, f=DECORATED)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.002591848373413086"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f894396b7f0&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(dummy, replacement, f=DECORATED)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.002519369125366211"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(dummy, dummy2, f=DECORATED)-@replace_by_foo]" time="0.0025038719177246094"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo
Expected error: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(dummy, dummy2, f=DECORATED)-@replace_by_foo()]" time="0.002489328384399414"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo()
Expected error: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(dummy, dummy2, f=DECORATED)-@replace_by_foo(goo)]" time="0.002421855926513672"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(goo)
Expected error: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(dummy, dummy2, f=DECORATED)-@replace_by_foo(&apos;hello&apos;)]" time="0.0021970272064208984"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected error: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(dummy, dummy2, f=DECORATED)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.002856731414794922"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected error: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(dummy, dummy2, f=DECORATED)-@replace_by_foo(replacement=goo)]" time="0.0024423599243164062"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(replacement=goo)
Expected error: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(dummy, dummy2, f=DECORATED)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0025043487548828125"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected error: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(dummy, dummy2, f=DECORATED)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.002440929412841797"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected error: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(dummy, dummy2, f=DECORATED)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0024776458740234375"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(dummy, dummy2, f=DECORATED)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0014503002166748047"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(dummy, dummy2, f=DECORATED)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.002350330352783203"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[easy_2m_args(dummy, dummy2, f=DECORATED)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0027327537536621094"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None, f=DECORATED)-@replace_by_foo]" time="0.0028722286224365234"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo
Expected error: &apos;AmbiguousFirstArgumentTypeError&apos; because using the decorator without parenthesis mimics usage with a single arg.

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None, f=DECORATED)-@replace_by_foo()]" time="0.0025129318237304688"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None, f=DECORATED)-@replace_by_foo(goo)]" time="0.0027446746826171875"><skipped message="the first positional arg is supposed not to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f8943921da0&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo)
</system-out><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None, f=DECORATED)-@replace_by_foo(&apos;hello&apos;)]" time="0.0027773380279541016"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None, f=DECORATED)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0027811527252197266"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None, f=DECORATED)-@replace_by_foo(replacement=goo)]" time="0.0030889511108398438"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None, f=DECORATED)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.002458810806274414"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None, f=DECORATED)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0027675628662109375"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None, f=DECORATED)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0028319358825683594"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f8943929518&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None, f=DECORATED)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.002791166305541992"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None, f=DECORATED)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0025763511657714844"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f8943919080&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None, f=DECORATED)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0026726722717285156"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None, f=DECORATED)-@replace_by_foo]" time="0.010389566421508789"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None, f=DECORATED)-@replace_by_foo()]" time="0.0028939247131347656"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None, f=DECORATED)-@replace_by_foo(goo)]" time="0.002195119857788086"><skipped message="the first positional arg is supposed not to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f89438c53c8&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo)
</system-out><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None, f=DECORATED)-@replace_by_foo(&apos;hello&apos;)]" time="0.002398252487182617"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None, f=DECORATED)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.002520322799682617"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None, f=DECORATED)-@replace_by_foo(replacement=goo)]" time="0.002370119094848633"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None, f=DECORATED)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0026504993438720703"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None, f=DECORATED)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0021049976348876953"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None, f=DECORATED)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0023682117462158203"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f89438b1f60&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None, f=DECORATED)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0019464492797851562"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None, f=DECORATED)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0016391277313232422"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f89438c4f98&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None, f=DECORATED)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0028162002563476562"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_2opt(replacement=None, dummy=DEFAULT_DUMMY_VALUE, f=DECORATED)-@replace_by_foo]" time="0.0024881362915039062"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo
Expected error: &apos;AmbiguousFirstArgumentTypeError&apos; because using the decorator without parenthesis mimics usage with a single arg.

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_2opt(replacement=None, dummy=DEFAULT_DUMMY_VALUE, f=DECORATED)-@replace_by_foo()]" time="0.0026345252990722656"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_2opt(replacement=None, dummy=DEFAULT_DUMMY_VALUE, f=DECORATED)-@replace_by_foo(goo)]" time="0.0027294158935546875"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo)
Expected error: &apos;AmbiguousFirstArgumentTypeError&apos; because calling a non-protected decorator with a callable leads to an error

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_2opt(replacement=None, dummy=DEFAULT_DUMMY_VALUE, f=DECORATED)-@replace_by_foo(&apos;hello&apos;)]" time="0.0026705265045166016"><skipped message="the first positional arg is supposed to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f89438d5e48&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_2opt(replacement=None, dummy=DEFAULT_DUMMY_VALUE, f=DECORATED)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.002918720245361328"><skipped message="the first positional arg is supposed to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f89438d5ef0&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_2opt(replacement=None, dummy=DEFAULT_DUMMY_VALUE, f=DECORATED)-@replace_by_foo(replacement=goo)]" time="0.0024602413177490234"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(replacement=goo)
Expected error: &apos;AmbiguousFirstArgumentTypeError&apos; because calling a non-protected decorator with a callable as first and only non-default argument leads to an error

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_2opt(replacement=None, dummy=DEFAULT_DUMMY_VALUE, f=DECORATED)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0026237964630126953"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_2opt(replacement=None, dummy=DEFAULT_DUMMY_VALUE, f=DECORATED)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0026085376739501953"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_2opt(replacement=None, dummy=DEFAULT_DUMMY_VALUE, f=DECORATED)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0025832653045654297"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_2opt(replacement=None, dummy=DEFAULT_DUMMY_VALUE, f=DECORATED)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.002804994583129883"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f89438e1f60&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_2opt(replacement=None, dummy=DEFAULT_DUMMY_VALUE, f=DECORATED)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0023584365844726562"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected error: &apos;AmbiguousFirstArgumentTypeError&apos; because calling a non-protected decorator with a callable as first and only non-default argument leads to an error

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[unprotected(explicit)_2opt(replacement=None, dummy=DEFAULT_DUMMY_VALUE, f=DECORATED)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.001705169677734375"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f89438d5cf8&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_2opt(replacement=None, dummy=DEFAULT_DUMMY_VALUE, f=DECORATED)-@replace_by_foo]" time="0.010063648223876953"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_2opt(replacement=None, dummy=DEFAULT_DUMMY_VALUE, f=DECORATED)-@replace_by_foo()]" time="0.002893209457397461"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_2opt(replacement=None, dummy=DEFAULT_DUMMY_VALUE, f=DECORATED)-@replace_by_foo(goo)]" time="0.013857841491699219"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_2opt(replacement=None, dummy=DEFAULT_DUMMY_VALUE, f=DECORATED)-@replace_by_foo(&apos;hello&apos;)]" time="0.0025348663330078125"><skipped message="the first positional arg is supposed to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f89438eab38&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_2opt(replacement=None, dummy=DEFAULT_DUMMY_VALUE, f=DECORATED)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0036554336547851562"><skipped message="the first positional arg is supposed to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f89438847f0&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_2opt(replacement=None, dummy=DEFAULT_DUMMY_VALUE, f=DECORATED)-@replace_by_foo(replacement=goo)]" time="0.013900518417358398"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_2opt(replacement=None, dummy=DEFAULT_DUMMY_VALUE, f=DECORATED)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.00244140625"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_2opt(replacement=None, dummy=DEFAULT_DUMMY_VALUE, f=DECORATED)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.002494335174560547"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_2opt(replacement=None, dummy=DEFAULT_DUMMY_VALUE, f=DECORATED)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.002658367156982422"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_2opt(replacement=None, dummy=DEFAULT_DUMMY_VALUE, f=DECORATED)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0024700164794921875"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f89438845c0&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_2opt(replacement=None, dummy=DEFAULT_DUMMY_VALUE, f=DECORATED)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.013060808181762695"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="388" name="test_all[protected(explicit)_2opt(replacement=None, dummy=DEFAULT_DUMMY_VALUE, f=DECORATED)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0026187896728515625"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:413: &lt;py._xmlgen.raw object at 0x7f89438886a0&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out></testcase></testsuite>