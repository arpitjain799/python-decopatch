<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="0" name="pytest" skips="40" tests="262" time="1.944"><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="14" name="test_doc_add_tag_function[flat_mode=False]" time="0.0071582794189453125"><system-out>Help on function add_tag in module decopatch.tests.test_doc:

add_tag(tag=&apos;hi!&apos;)
    Example decorator to add a &apos;tag&apos; attribute to a function.
    :param tag: the &apos;tag&apos; value to set on the decorated function (default &apos;hi!).

None
</system-out></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="14" name="test_doc_add_tag_function[flat_mode=True]" time="0.003165006637573242"><system-out>Help on function add_tag in module decopatch.tests.test_doc:

add_tag(tag=&apos;hi!&apos;)
    Example decorator to add a &apos;tag&apos; attribute to a function.
    :param tag: the &apos;tag&apos; value to set on the decorated function (default &apos;hi!).

None
</system-out></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="78" name="test_doc_say_hello[nested]" time="0.004937648773193359"></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="78" name="test_doc_say_hello[flat]" time="0.00542759895324707"></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="78" name="test_doc_say_hello[double-flat]" time="0.006739616394042969"></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="207" name="test_doc_add_tag_class_and_function[flat_mode=False]" time="0.0031197071075439453"><system-out>Help on function add_tag in module decopatch.tests.test_doc:

add_tag(tag=&apos;hi!&apos;)
    Example decorator to add a &apos;tag&apos; attribute to a function or class. It can be
    used with and without parenthesis, with and without arguments.
    
    :param tag: the &apos;tag&apos; value to set on the decorated item (default &apos;hi!).

None
</system-out></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="207" name="test_doc_add_tag_class_and_function[flat_mode=True]" time="0.002517223358154297"><system-out>Help on function add_tag in module decopatch.tests.test_doc:

add_tag(tag=&apos;hi!&apos;)
    Example decorator to add a &apos;tag&apos; attribute to a function or class. It can be
    used with and without parenthesis, with and without arguments.
    
    :param tag: the &apos;tag&apos; value to set on the decorated item (default &apos;hi!).

None
</system-out></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="17" name="test_doc_impl_first_tag_mandatory[uses_introspection=True-nested_mode=True]" time="0.003670215606689453"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="17" name="test_doc_impl_first_tag_mandatory[uses_introspection=True-nested_mode=False]" time="0.0037796497344970703"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="17" name="test_doc_impl_first_tag_mandatory[uses_introspection=False-nested_mode=True]" time="0.002656698226928711"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="17" name="test_doc_impl_first_tag_mandatory[uses_introspection=False-nested_mode=False]" time="0.002590179443359375"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="82" name="test_doc_impl_first_tag_optional" time="0.0018885135650634766"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="143" name="test_doc_impl_first_say_hello" time="0.005574226379394531"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="217" name="test_doc_impl_first_class_tag_mandatory[uses_introspection=True]" time="0.003162384033203125"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="217" name="test_doc_impl_first_class_tag_mandatory[uses_introspection=False]" time="0.003000020980834961"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="267" name="test_doc_nested_mode_tag_mandatory" time="0.0011298656463623047"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="288" name="test_doc_impl_first_tag_mandatory_protected[uses_introspection=True-kwonly=True]" time="0.005393028259277344"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="288" name="test_doc_impl_first_tag_mandatory_protected[uses_introspection=False-kwonly=True]" time="0.003298044204711914"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="319" name="test_doc_impl_first_tag_optional_nonprotected[kwonly=False]" time="0.002542734146118164"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="319" name="test_doc_impl_first_tag_optional_nonprotected[kwonly=True]" time="0.0020904541015625"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="356" name="test_doc_impl_first_tag_optional_protected[introspection=True-kwonly=False]" time="0.0022051334381103516"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="356" name="test_doc_impl_first_tag_optional_protected[introspection=True-kwonly=True]" time="0.002332448959350586"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="356" name="test_doc_impl_first_tag_optional_protected[introspection=False-kwonly=False]" time="0.0029649734497070312"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="356" name="test_doc_impl_first_tag_optional_protected[introspection=False-kwonly=True]" time="0.0030112266540527344"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="427" name="test_varpos_and_decorated_before_in_flat_mode" time="0.00511932373046875"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="463" name="test_kwargs" time="0.0015282630920410156"></testcase><testcase classname="decopatch.tests.test_doc_disambiguation" file="decopatch/tests/test_doc_disambiguation.py" line="9" name="test_no_args[flat_mode=False]" time="0.004252195358276367"></testcase><testcase classname="decopatch.tests.test_doc_disambiguation" file="decopatch/tests/test_doc_disambiguation.py" line="9" name="test_no_args[flat_mode=True]" time="0.004592418670654297"></testcase><testcase classname="decopatch.tests.test_doc_disambiguation" file="decopatch/tests/test_doc_disambiguation.py" line="67" name="test_mandatory_kwargs[flat_mode=False]" time="0.0029997825622558594"><system-out>Help on function replace_with in module decopatch.main:

replace_with(*, replacement)
    Decorator to replace anything with the &lt;replacement&gt; object.

</system-out></testcase><testcase classname="decopatch.tests.test_doc_disambiguation" file="decopatch/tests/test_doc_disambiguation.py" line="67" name="test_mandatory_kwargs[flat_mode=True]" time="0.0022895336151123047"><system-out>Help on function replace_with in module decopatch.main:

replace_with(*, replacement)
    Decorator to replace anything with the &lt;replacement&gt; object.

</system-out></testcase><testcase classname="decopatch.tests.test_doc_disambiguation" file="decopatch/tests/test_doc_disambiguation.py" line="91" name="test_optional_kwargs[flat_mode=False]" time="0.001413583755493164"><system-out>Help on function replace_with in module decopatch.tests._test_doc_py3:

replace_with(*, replacement=&apos;hello&apos;)
    Decorator to replace anything with the &lt;replacement&gt; object.

</system-out></testcase><testcase classname="decopatch.tests.test_doc_disambiguation" file="decopatch/tests/test_doc_disambiguation.py" line="91" name="test_optional_kwargs[flat_mode=True]" time="0.0031714439392089844"><system-out>Help on function replace_with in module decopatch.tests._test_doc_py3:

replace_with(*, replacement=&apos;hello&apos;)
    Decorator to replace anything with the &lt;replacement&gt; object.

</system-out></testcase><testcase classname="decopatch.tests.test_introspection" file="decopatch/tests/test_introspection.py" line="3" name="test_on_functions" time="0.0019505023956298828"></testcase><testcase classname="decopatch.tests.test_introspection_base" file="decopatch/tests/test_introspection_base.py" line="31" name="test_introspection[call_mode=0-isclass=False]" time="0.0026369094848632812"></testcase><testcase classname="decopatch.tests.test_introspection_base" file="decopatch/tests/test_introspection_base.py" line="31" name="test_introspection[call_mode=0-isclass=True]" time="0.0018930435180664062"></testcase><testcase classname="decopatch.tests.test_introspection_base" file="decopatch/tests/test_introspection_base.py" line="31" name="test_introspection[call_mode=1-isclass=False]" time="0.0013880729675292969"></testcase><testcase classname="decopatch.tests.test_introspection_base" file="decopatch/tests/test_introspection_base.py" line="31" name="test_introspection[call_mode=1-isclass=True]" time="0.0021991729736328125"></testcase><testcase classname="decopatch.tests.test_introspection_base" file="decopatch/tests/test_introspection_base.py" line="31" name="test_introspection[call_mode=2-isclass=False]" time="0.001971006393432617"></testcase><testcase classname="decopatch.tests.test_introspection_base" file="decopatch/tests/test_introspection_base.py" line="31" name="test_introspection[call_mode=2-isclass=True]" time="0.0020911693572998047"></testcase><testcase classname="decopatch.tests.test_issues" file="decopatch/tests/test_issues.py" line="5" name="test_notnamed_flat_mode_varpositional[position=0]" time="0.002722501754760742"></testcase><testcase classname="decopatch.tests.test_issues" file="decopatch/tests/test_issues.py" line="5" name="test_notnamed_flat_mode_varpositional[position=1]" time="0.001941680908203125"></testcase><testcase classname="decopatch.tests.test_issues" file="decopatch/tests/test_issues.py" line="26" name="test_named_flat_mode_varpositional[position=0]" time="0.0021817684173583984"></testcase><testcase classname="decopatch.tests.test_issues" file="decopatch/tests/test_issues.py" line="26" name="test_named_flat_mode_varpositional[position=1]" time="0.0027124881744384766"></testcase><testcase classname="decopatch.tests.test_issues" file="decopatch/tests/test_issues.py" line="48" name="test_disambiguation_during_binding" time="0.0020911693572998047"></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo]" time="0.0024976730346679688"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo()]" time="0.0020589828491210938"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(goo)]" time="0.0018436908721923828"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;NotADecoratorError&apos; because We are not able to disambiguate but hopefully users will realize

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(&apos;hello&apos;)]" time="0.002444028854370117"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because we correctly disambiguate by default since the argument is non-callable

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0025844573974609375"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because we correctly disambiguate by default since the argument is non-callable

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(replacement=goo)]" time="0.0026144981384277344"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(replacement=goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0024144649505615234"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0018131732940673828"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.004391908645629883"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.002441883087158203"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0024394989013671875"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.002355337142944336"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo]" time="0.004807710647583008"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo()]" time="0.003303050994873047"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(goo)]" time="0.00736546516418457"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;NotADecoratorError&apos; because We are not able to disambiguate but hopefully users will realize

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(&apos;hello&apos;)]" time="0.008066892623901367"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because we correctly disambiguate by default since the argument is non-callable

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.004873991012573242"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because we correctly disambiguate by default since the argument is non-callable

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(replacement=goo)]" time="0.002969980239868164"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(replacement=goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.003748655319213867"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.003874063491821289"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.002655029296875"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0029768943786621094"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0038912296295166016"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0035026073455810547"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo]" time="0.0025565624237060547"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo()]" time="0.0020966529846191406"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(goo)]" time="0.0030341148376464844"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;NotADecoratorError&apos; because We are not able to disambiguate but hopefully users will realize

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(&apos;hello&apos;)]" time="0.0027008056640625"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.003058195114135742"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(replacement=goo)]" time="0.002359151840209961"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(replacement=goo)
Expected ERROR: &apos;TypeError&apos; because decorator impl does not accept keyword args

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0029642581939697266"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because decorator impl does not accept keyword args

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.002995014190673828"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because decorator impl does not accept keyword args

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.002886533737182617"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.002632617950439453"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0018963813781738281"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0024275779724121094"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo]" time="0.0026056766510009766"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo
Expected ERROR: &apos;InvalidMandatoryArgError&apos; because a no-parenthesis usage will be declared by the default disambiguator or the stack introspecter as decorated target

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo()]" time="0.002485036849975586"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo()
Expected ERROR: &apos;TypeError&apos; because python does not allow f() if f has 1 mandatory arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(goo)]" time="0.0031926631927490234"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;InvalidMandatoryArgError&apos; because calling with a single positional callablewill be declared by the default disambiguator or the stack introspecter as decorated target, andtherefore it will say that there is something missing

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(&apos;hello&apos;)]" time="0.0017633438110351562"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0020966529846191406"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(replacement=goo)]" time="0.0028858184814453125"><skipped message="decorator impl does not have a &apos;replacement&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfdb4f3c8&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(replacement=goo)
</system-out><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(replacement=goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0024538040161132812"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0026078224182128906"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0018703937530517578"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0029807090759277344"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0026476383209228516"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.002678394317626953"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo]" time="0.00273895263671875"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo
Expected ERROR: &apos;InvalidMandatoryArgError&apos; because a no-parenthesis usage will be declared by the default disambiguator or the stack introspecter as decorated target

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo()]" time="0.0019273757934570312"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo()
Expected ERROR: &apos;TypeError&apos; because python does not allow f() if f has 1 mandatory arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(goo)]" time="0.0031867027282714844"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;AssertionError&apos; because The stack introspector will work correctly. So the decorated functionwill be replaced by foo. Which is not`goo`

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(&apos;hello&apos;)]" time="0.0024127960205078125"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.002343416213989258"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(replacement=goo)]" time="0.0023005008697509766"><skipped message="decorator impl does not have a &apos;replacement&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfdb54208&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(replacement=goo)
</system-out><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(replacement=goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0017881393432617188"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.002347230911254883"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.002825021743774414"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0030117034912109375"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0021762847900390625"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0019216537475585938"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo]" time="0.002725839614868164"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo
Expected ERROR: &apos;InvalidMandatoryArgError&apos; because using the decorator without parenthesis mimics usage with a single arg.

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo()]" time="0.0030765533447265625"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo()
Expected ERROR: &apos;TypeError&apos; because python does not allow f() if f has 1 mandatory arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(goo)]" time="0.002703428268432617"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;InvalidMandatoryArgError&apos; because calling a decorator with a callable as first and only non-default argument leads by default to an error

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(&apos;hello&apos;)]" time="0.002032041549682617"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfdaeeeb8&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.002605438232421875"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfdaf0b00&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(replacement=goo)]" time="0.0026617050170898438"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0030803680419921875"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfdaf0978&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.001752614974975586"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfdafb128&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.007019519805908203"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.002518892288208008"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0019474029541015625"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.002241849899291992"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo]" time="0.002589702606201172"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo
Expected ERROR: &apos;InvalidMandatoryArgError&apos; because using the decorator without parenthesis mimics usage with a single arg.

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo()]" time="0.0021851062774658203"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo()
Expected ERROR: &apos;TypeError&apos; because python does not allow f() if f has 1 mandatory arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(goo)]" time="0.00241851806640625"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;InvalidMandatoryArgError&apos; because calling a decorator with a callable as first and only non-default argument leads by default to an error

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(&apos;hello&apos;)]" time="0.0019388198852539062"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfdb06780&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0019888877868652344"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfdb0b3c8&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(replacement=goo)]" time="0.0023686885833740234"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0021479129791259766"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfdc8f358&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0020673274993896484"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfdb0be48&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0019609928131103516"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0018377304077148438"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0021347999572753906"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.002591371536254883"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo]" time="0.002151012420654297"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo
Expected ERROR: &apos;InvalidMandatoryArgError&apos; because a no-parenthesis usage will be declared by the disambiguator as decorated target

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo()]" time="0.0021457672119140625"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo()
Expected ERROR: &apos;TypeError&apos; because python does not allow f() if f has 1 mandatory arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(goo)]" time="0.0017123222351074219"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(&apos;hello&apos;)]" time="0.001997709274291992"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfdb15a58&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0021839141845703125"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfdb186a0&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(replacement=goo)]" time="0.003823518753051758"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0020508766174316406"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfdc8f4a8&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.001804351806640625"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfdb2aeb8&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.007078647613525391"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.004238128662109375"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0025064945220947266"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.003695964813232422"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo]" time="0.002611875534057617"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo
Expected ERROR: &apos;InvalidMandatoryArgError&apos; because a no-parenthesis usage will be declared by the disambiguator as decorated target

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo()]" time="0.002978801727294922"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo()
Expected ERROR: &apos;TypeError&apos; because python does not allow f() if f has 1 mandatory arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(goo)]" time="0.002795696258544922"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(&apos;hello&apos;)]" time="0.0021638870239257812"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfdb1bdd8&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0027213096618652344"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfdaa49b0&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(replacement=goo)]" time="0.0029714107513427734"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.002291440963745117"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfdb1ba90&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0022177696228027344"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfdaa72b0&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.002440929412841797"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0029642581939697266"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.003007650375366211"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.002606630325317383"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo]" time="0.0018887519836425781"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo()]" time="0.00274658203125"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo()
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(goo)]" time="0.0027642250061035156"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(&apos;hello&apos;)]" time="0.0027997493743896484"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.002440929412841797"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(replacement=goo)]" time="0.0019834041595458984"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(replacement=goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.002686738967895508"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0029191970825195312"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.002549886703491211"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.002073049545288086"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfdab83c8&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0020639896392822266"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0025157928466796875"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfdabd518&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo]" time="0.0031485557556152344"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo()]" time="0.0028345584869384766"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo()
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(goo)]" time="0.0019338130950927734"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(&apos;hello&apos;)]" time="0.0024347305297851562"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0025146007537841797"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(replacement=goo)]" time="0.0024483203887939453"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(replacement=goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0024423599243164062"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0019283294677734375"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0021457672119140625"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfdacb748&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0025568008422851562"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0025873184204101562"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfdacbf98&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0024476051330566406"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo]" time="0.0018737316131591797"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo()]" time="0.002629995346069336"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo()
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(goo)]" time="0.002618074417114258"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(&apos;hello&apos;)]" time="0.0033981800079345703"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0025467872619628906"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(replacement=goo)]" time="0.0018267631530761719"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(replacement=goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.002537965774536133"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.002590656280517578"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0025360584259033203"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0023279190063476562"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0018184185028076172"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0025162696838378906"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo]" time="0.0029077529907226562"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo()]" time="0.002559185028076172"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(goo)]" time="0.0024166107177734375"><skipped message="the first positional arg is supposed not to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfda67128&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo)
</system-out><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(&apos;hello&apos;)]" time="0.001920938491821289"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0024433135986328125"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(replacement=goo)]" time="0.002685070037841797"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0024945735931396484"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0027115345001220703"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0020956993103027344"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfda6d2b0&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.002645730972290039"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0024995803833007812"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfda749b0&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.002590179443359375"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo]" time="0.00234222412109375"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo()]" time="0.017284870147705078"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(goo)]" time="0.006938934326171875"><skipped message="the first positional arg is supposed not to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfdcb7b00&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo)
</system-out><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(&apos;hello&apos;)]" time="0.0028340816497802734"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0026378631591796875"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(replacement=goo)]" time="0.0019385814666748047"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0027496814727783203"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0030698776245117188"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0026504993438720703"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfda6dd68&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0019867420196533203"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0022716522216796875"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfda82b00&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0026531219482421875"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo]" time="0.0027382373809814453"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo()]" time="0.004112958908081055"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(goo)]" time="0.0018651485443115234"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;NotADecoratorError&apos; because No explicit exception is raised but since a double-call is made, user will probably realize that something is wrong

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(&apos;hello&apos;)]" time="0.002610921859741211"><skipped message="the first positional arg is supposed to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfdabd470&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0025141239166259766"><skipped message="the first positional arg is supposed to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfda87c50&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(replacement=goo)]" time="0.0025856494903564453"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0024955272674560547"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.005400657653808594"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.002832651138305664"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.001955747604370117"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfda867b8&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0022737979888916016"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0026702880859375"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfda91b70&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo]" time="0.0031430721282958984"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo()]" time="0.0025429725646972656"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(goo)]" time="0.0018689632415771484"><system-out>
Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(&apos;hello&apos;)]" time="0.0027527809143066406"><skipped message="the first positional arg is supposed to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfda97358&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0026259422302246094"><skipped message="the first positional arg is supposed to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfda97f28&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(replacement=goo)]" time="0.0028009414672851562"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0025680065155029297"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.002501964569091797"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.002538442611694336"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.002459287643432617"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfda9fbe0&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.002504587173461914"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.001861572265625"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfdaa2d30&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo]" time="0.0029578208923339844"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo()]" time="0.0026285648345947266"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(goo)]" time="0.0025959014892578125"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(&apos;hello&apos;)]" time="0.0024983882904052734"><skipped message="the first positional arg is supposed to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfda25518&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0019927024841308594"><skipped message="the first positional arg is supposed to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfda2a128&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(replacement=goo)]" time="0.002567768096923828"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.001382589340209961"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.002519845962524414"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0027213096618652344"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0020401477813720703"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfda2aeb8&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0025451183319091797"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.002552032470703125"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fbcfda36080&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="15" name="test_so_flat" time="0.003320932388305664"><system-out>hello from before run
a -1 b 2
hello from before run
a 100 b 2
</system-out></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="40" name="test_so_double_flat" time="0.0019037723541259766"><system-out>hello from before run
a -1 b 2
hello from before run
a 100 b 2
</system-out></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="62" name="test_so_wrap[style=flat]" time="0.0033032894134521484"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="62" name="test_so_wrap[style=double-flat]" time="0.0034770965576171875"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="100" name="test_so_2[mode=flat]" time="0.003281116485595703"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="100" name="test_so_2[mode=double-flat]" time="0.003409862518310547"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="144" name="test_so_3[mode=flat]" time="0.002722501754760742"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="144" name="test_so_3[mode=double-flat]" time="0.006798982620239258"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="189" name="test_so_4[mode=None]" time="0.004105329513549805"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="189" name="test_so_4[mode=flat]" time="0.00373077392578125"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="309" name="test_so_5[mode=no-deco]" time="0.0034105777740478516"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="309" name="test_so_5[mode=None]" time="0.003816843032836914"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="309" name="test_so_5[mode=flat]" time="0.004448652267456055"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="387" name="test_so_6" time="0.0027680397033691406"></testcase></testsuite>