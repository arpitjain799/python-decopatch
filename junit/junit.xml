<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="0" name="pytest" skips="40" tests="256" time="1.728"><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="14" name="test_doc_add_tag_function[flat_mode=False]" time="0.006880998611450195"><system-out>Help on function add_tag in module decopatch.tests.test_doc:

add_tag(tag=&apos;hi!&apos;)
    Example decorator to add a &apos;tag&apos; attribute to a function.
    :param tag: the &apos;tag&apos; value to set on the decorated function (default &apos;hi!).

None
</system-out></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="14" name="test_doc_add_tag_function[flat_mode=True]" time="0.002511739730834961"><system-out>Help on function add_tag in module decopatch.tests.test_doc:

add_tag(tag=&apos;hi!&apos;)
    Example decorator to add a &apos;tag&apos; attribute to a function.
    :param tag: the &apos;tag&apos; value to set on the decorated function (default &apos;hi!).

None
</system-out></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="78" name="test_doc_say_hello[nested]" time="0.004488945007324219"></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="78" name="test_doc_say_hello[flat]" time="0.009730815887451172"></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="78" name="test_doc_say_hello[double-flat]" time="0.004793643951416016"></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="207" name="test_doc_add_tag_class_and_function[flat_mode=False]" time="0.0031321048736572266"><system-out>Help on function add_tag in module decopatch.tests.test_doc:

add_tag(tag=&apos;hi!&apos;)
    Example decorator to add a &apos;tag&apos; attribute to a function or class. It can be
    used with and without parenthesis, with and without arguments.
    
    :param tag: the &apos;tag&apos; value to set on the decorated item (default &apos;hi!).

None
</system-out></testcase><testcase classname="decopatch.tests.test_doc" file="decopatch/tests/test_doc.py" line="207" name="test_doc_add_tag_class_and_function[flat_mode=True]" time="0.0029282569885253906"><system-out>Help on function add_tag in module decopatch.tests.test_doc:

add_tag(tag=&apos;hi!&apos;)
    Example decorator to add a &apos;tag&apos; attribute to a function or class. It can be
    used with and without parenthesis, with and without arguments.
    
    :param tag: the &apos;tag&apos; value to set on the decorated item (default &apos;hi!).

None
</system-out></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="17" name="test_doc_impl_first_tag_mandatory[uses_introspection=True-nested_mode=True]" time="0.011484146118164062"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="17" name="test_doc_impl_first_tag_mandatory[uses_introspection=True-nested_mode=False]" time="0.007592916488647461"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="17" name="test_doc_impl_first_tag_mandatory[uses_introspection=False-nested_mode=True]" time="0.002933502197265625"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="17" name="test_doc_impl_first_tag_mandatory[uses_introspection=False-nested_mode=False]" time="0.003325223922729492"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="82" name="test_doc_impl_first_tag_optional" time="0.003092527389526367"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="143" name="test_doc_impl_first_say_hello" time="0.004908561706542969"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="217" name="test_doc_impl_first_class_tag_mandatory[uses_introspection=True]" time="0.005262613296508789"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="217" name="test_doc_impl_first_class_tag_mandatory[uses_introspection=False]" time="0.002109527587890625"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="267" name="test_doc_nested_mode_tag_mandatory" time="0.0027463436126708984"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="288" name="test_doc_impl_first_tag_mandatory_protected[uses_introspection=True-kwonly=True]" time="0.004647493362426758"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="288" name="test_doc_impl_first_tag_mandatory_protected[uses_introspection=False-kwonly=True]" time="0.0017676353454589844"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="319" name="test_doc_impl_first_tag_optional_nonprotected[kwonly=False]" time="0.0024652481079101562"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="319" name="test_doc_impl_first_tag_optional_nonprotected[kwonly=True]" time="0.0016369819641113281"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="356" name="test_doc_impl_first_tag_optional_protected[introspection=True-kwonly=False]" time="0.006799221038818359"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="356" name="test_doc_impl_first_tag_optional_protected[introspection=True-kwonly=True]" time="0.007498979568481445"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="356" name="test_doc_impl_first_tag_optional_protected[introspection=False-kwonly=False]" time="0.003267526626586914"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="356" name="test_doc_impl_first_tag_optional_protected[introspection=False-kwonly=True]" time="0.0032196044921875"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="427" name="test_varpos_and_decorated_before_in_flat_mode" time="0.0033342838287353516"></testcase><testcase classname="decopatch.tests.test_doc_advanced" file="decopatch/tests/test_doc_advanced.py" line="463" name="test_kwargs" time="0.0018947124481201172"></testcase><testcase classname="decopatch.tests.test_doc_disambiguation" file="decopatch/tests/test_doc_disambiguation.py" line="9" name="test_no_args[flat_mode=False]" time="0.002334117889404297"></testcase><testcase classname="decopatch.tests.test_doc_disambiguation" file="decopatch/tests/test_doc_disambiguation.py" line="9" name="test_no_args[flat_mode=True]" time="0.002815723419189453"></testcase><testcase classname="decopatch.tests.test_doc_disambiguation" file="decopatch/tests/test_doc_disambiguation.py" line="67" name="test_mandatory_kwargs[flat_mode=False]" time="0.0026979446411132812"><system-out>Help on function replace_with in module decopatch.main:

replace_with(*, replacement)
    Decorator to replace anything with the &lt;replacement&gt; object.

</system-out></testcase><testcase classname="decopatch.tests.test_doc_disambiguation" file="decopatch/tests/test_doc_disambiguation.py" line="67" name="test_mandatory_kwargs[flat_mode=True]" time="0.002791166305541992"><system-out>Help on function replace_with in module decopatch.main:

replace_with(*, replacement)
    Decorator to replace anything with the &lt;replacement&gt; object.

</system-out></testcase><testcase classname="decopatch.tests.test_doc_disambiguation" file="decopatch/tests/test_doc_disambiguation.py" line="91" name="test_optional_kwargs[flat_mode=False]" time="0.002070903778076172"><system-out>Help on function replace_with in module decopatch.tests._test_doc_py3:

replace_with(*, replacement=&apos;hello&apos;)
    Decorator to replace anything with the &lt;replacement&gt; object.

</system-out></testcase><testcase classname="decopatch.tests.test_doc_disambiguation" file="decopatch/tests/test_doc_disambiguation.py" line="91" name="test_optional_kwargs[flat_mode=True]" time="0.0018107891082763672"><system-out>Help on function replace_with in module decopatch.tests._test_doc_py3:

replace_with(*, replacement=&apos;hello&apos;)
    Decorator to replace anything with the &lt;replacement&gt; object.

</system-out></testcase><testcase classname="decopatch.tests.test_introspection" file="decopatch/tests/test_introspection.py" line="3" name="test_on_functions" time="0.005660533905029297"></testcase><testcase classname="decopatch.tests.test_issues" file="decopatch/tests/test_issues.py" line="5" name="test_notnamed_flat_mode_varpositional[position=0]" time="0.002740144729614258"></testcase><testcase classname="decopatch.tests.test_issues" file="decopatch/tests/test_issues.py" line="5" name="test_notnamed_flat_mode_varpositional[position=1]" time="0.0029175281524658203"></testcase><testcase classname="decopatch.tests.test_issues" file="decopatch/tests/test_issues.py" line="26" name="test_named_flat_mode_varpositional[position=0]" time="0.0012929439544677734"></testcase><testcase classname="decopatch.tests.test_issues" file="decopatch/tests/test_issues.py" line="26" name="test_named_flat_mode_varpositional[position=1]" time="0.0013146400451660156"></testcase><testcase classname="decopatch.tests.test_issues" file="decopatch/tests/test_issues.py" line="48" name="test_disambiguation_during_binding" time="0.001020193099975586"></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo]" time="0.0027472972869873047"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo()]" time="0.002308368682861328"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(goo)]" time="0.0034160614013671875"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;NotADecoratorError&apos; because We are not able to disambiguate but hopefully users will realize

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(&apos;hello&apos;)]" time="0.001913309097290039"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because we correctly disambiguate by default since the argument is non-callable

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0037703514099121094"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because we correctly disambiguate by default since the argument is non-callable

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(replacement=goo)]" time="0.0023806095123291016"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(replacement=goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0022275447845458984"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0015132427215576172"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.00135040283203125"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.002775430679321289"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.002740144729614258"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=False-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.002855062484741211"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo]" time="0.0028357505798339844"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo()]" time="0.0031735897064208984"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(goo)]" time="0.0031099319458007812"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;NotADecoratorError&apos; because We are not able to disambiguate but hopefully users will realize

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(&apos;hello&apos;)]" time="0.0030164718627929688"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because we correctly disambiguate by default since the argument is non-callable

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.003687620162963867"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because we correctly disambiguate by default since the argument is non-callable

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(replacement=goo)]" time="0.001760244369506836"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(replacement=goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0018546581268310547"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0023686885833740234"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0031287670135498047"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.003192901611328125"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0030694007873535156"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_0_args()_flatmode_kwonly=True-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.003220796585083008"><system-out>Generated decorator : replace_by_foo(*_)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow our decorator to be called with more than 1 positional, 

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo]" time="0.0027723312377929688"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo()]" time="0.0026824474334716797"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(goo)]" time="0.0018694400787353516"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;NotADecoratorError&apos; because We are not able to disambiguate but hopefully users will realize

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(&apos;hello&apos;)]" time="0.0019474029541015625"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.004828929901123047"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(replacement=goo)]" time="0.002778291702270508"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(replacement=goo)
Expected ERROR: &apos;TypeError&apos; because decorator impl does not accept keyword args

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0035512447357177734"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because decorator impl does not accept keyword args

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0013816356658935547"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because decorator impl does not accept keyword args

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.003628253936767578"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0025246143341064453"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.002962827682495117"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[case_hard_varpositional-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.002899169921875"><system-out>Generated decorator : replace_by_foo(*args)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo]" time="0.0027179718017578125"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo
Expected ERROR: &apos;InvalidMandatoryArgError&apos; because a no-parenthesis usage will be declared by the default disambiguator or the stack introspecter as decorated target

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo()]" time="0.002420663833618164"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo()
Expected ERROR: &apos;TypeError&apos; because python does not allow f() if f has 1 mandatory arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(goo)]" time="0.0014922618865966797"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;InvalidMandatoryArgError&apos; because calling with a single positional callablewill be declared by the default disambiguator or the stack introspecter as decorated target, andtherefore it will say that there is something missing

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(&apos;hello&apos;)]" time="0.002329587936401367"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.002475261688232422"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(replacement=goo)]" time="0.0016908645629882812"><skipped message="decorator impl does not have a &apos;replacement&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bba6e80&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(replacement=goo)
</system-out><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(replacement=goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.002132892608642578"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.002355337142944336"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0024466514587402344"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0027010440826416016"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0019865036010742188"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_1m_arg(dummy)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0024192333221435547"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo]" time="0.0047261714935302734"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo
Expected ERROR: &apos;InvalidMandatoryArgError&apos; because a no-parenthesis usage will be declared by the default disambiguator or the stack introspecter as decorated target

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo()]" time="0.002666950225830078"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo()
Expected ERROR: &apos;TypeError&apos; because python does not allow f() if f has 1 mandatory arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(goo)]" time="0.006583452224731445"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;AssertionError&apos; because The stack introspector will work correctly. So the decorated functionwill be replaced by foo. Which is not`goo`

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(&apos;hello&apos;)]" time="0.0016384124755859375"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0027742385864257812"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(replacement=goo)]" time="0.0025408267974853516"><skipped message="decorator impl does not have a &apos;replacement&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bb44e80&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(replacement=goo)
</system-out><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(replacement=goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0031931400299072266"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0029637813568115234"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0028252601623535156"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0029883384704589844"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.002471923828125"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_1m_arg(dummy)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.002145051956176758"><system-out>Generated decorator : replace_by_foo(dummy)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo]" time="0.00148773193359375"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo
Expected ERROR: &apos;InvalidMandatoryArgError&apos; because using the decorator without parenthesis mimics usage with a single arg.

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo()]" time="0.0015234947204589844"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo()
Expected ERROR: &apos;TypeError&apos; because python does not allow f() if f has 1 mandatory arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(goo)]" time="0.0029675960540771484"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;InvalidMandatoryArgError&apos; because calling a decorator with a callable as first and only non-default argument leads by default to an error

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(&apos;hello&apos;)]" time="0.002583026885986328"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bb5c940&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0023360252380371094"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bb44438&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(replacement=goo)]" time="0.0028634071350097656"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.002635955810546875"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bb62748&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.002748727798461914"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bb65390&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0031020641326904297"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0026552677154541016"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.002213716506958008"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=False-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.003255128860473633"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo]" time="0.0015592575073242188"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo
Expected ERROR: &apos;InvalidMandatoryArgError&apos; because using the decorator without parenthesis mimics usage with a single arg.

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo()]" time="0.0030617713928222656"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo()
Expected ERROR: &apos;TypeError&apos; because python does not allow f() if f has 1 mandatory arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(goo)]" time="0.0020225048065185547"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;InvalidMandatoryArgError&apos; because calling a decorator with a callable as first and only non-default argument leads by default to an error

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(&apos;hello&apos;)]" time="0.0037949085235595703"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bb53b00&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0030717849731445312"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bb53a58&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(replacement=goo)]" time="0.0028710365295410156"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0018093585968017578"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bb6e908&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.002137899398803711"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bb74550&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.003385782241821289"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0028388500213623047"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0033648014068603516"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(default)_1m_arg(replacement)_kwonly=True-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0013933181762695312"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo]" time="0.004448890686035156"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo
Expected ERROR: &apos;InvalidMandatoryArgError&apos; because a no-parenthesis usage will be declared by the disambiguator as decorated target

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo()]" time="0.0026807785034179688"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo()
Expected ERROR: &apos;TypeError&apos; because python does not allow f() if f has 1 mandatory arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(goo)]" time="0.002955913543701172"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(&apos;hello&apos;)]" time="0.0020356178283691406"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bb79cc0&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.003935813903808594"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bb79c18&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(replacement=goo)]" time="0.002575397491455078"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0029904842376708984"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bb7e940&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.002827882766723633"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bb83518&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0018661022186279297"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0013170242309570312"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0017545223236083984"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=False-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.002196073532104492"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo]" time="0.0029828548431396484"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo
Expected ERROR: &apos;InvalidMandatoryArgError&apos; because a no-parenthesis usage will be declared by the disambiguator as decorated target

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo()]" time="0.0016150474548339844"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo()
Expected ERROR: &apos;TypeError&apos; because python does not allow f() if f has 1 mandatory arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(goo)]" time="0.0038411617279052734"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(&apos;hello&apos;)]" time="0.002414703369140625"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bb07be0&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0024900436401367188"><skipped message="This decorator does not access a noncallable positional arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bb07b70&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(replacement=goo)]" time="0.0032329559326171875"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0013957023620605469"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bb0d9e8&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0021653175354003906"><skipped message="decorator impl does not have a &apos;dummy&apos; arg" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bb12630&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0029795169830322266"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0030744075775146484"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0024302005767822266"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[protected(explicit)_1m_arg(replacement)_kwonly=True-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0016677379608154297"><system-out>Generated decorator : replace_by_foo(replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow 2 args if f has 1 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo]" time="0.0029172897338867188"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo()]" time="0.0026378631591796875"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo()
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(goo)]" time="0.002582550048828125"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(&apos;hello&apos;)]" time="0.0018308162689208984"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.002470254898071289"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(replacement=goo)]" time="0.0027573108673095703"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(replacement=goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.002540111541748047"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.002592802047729492"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0017902851104736328"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0021338462829589844"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bb21240&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.002448558807373047"><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(replacement, dummy)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0024383068084716797"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bb27390&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement, dummy)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo]" time="0.0025675296783447266"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo()]" time="0.001836538314819336"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo()
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(goo)]" time="0.0020041465759277344"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(&apos;hello&apos;)]" time="0.002547025680541992"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0024313926696777344"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(replacement=goo)]" time="0.0025873184204101562"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(replacement=goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.002116680145263672"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0017547607421875"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.002725362777709961"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bb27710&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0023086071014404297"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.002328157424926758"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bb40390&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, replacement)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0023005008697509766"><system-out>Generated decorator : replace_by_foo(dummy, replacement)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo]" time="0.001977682113647461"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo()]" time="0.002894163131713867"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo()
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(goo)]" time="0.002891063690185547"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(&apos;hello&apos;)]" time="0.002524137496948242"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.002526521682739258"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(replacement=goo)]" time="0.0018732547760009766"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(replacement=goo)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0023174285888671875"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0024712085723876953"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected ERROR: &apos;TypeError&apos; because python does not allow &lt; 2 args if f has 2 arg

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.002410411834716797"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.002394437789916992"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0018038749694824219"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[easy_2m_args(dummy, dummy2)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.001976490020751953"><system-out>Generated decorator : replace_by_foo(dummy, dummy2)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo]" time="0.0033872127532958984"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo()]" time="0.002650022506713867"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(goo)]" time="0.0024099349975585938"><skipped message="the first positional arg is supposed not to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bad3438&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo)
</system-out><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(&apos;hello&apos;)]" time="0.002041339874267578"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0024061203002929688"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(replacement=goo)]" time="0.0023298263549804688"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.00258636474609375"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.002226591110229492"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.001983642578125"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bad7e10&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0023589134216308594"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0026237964630126953"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bae1cc0&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[default_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.002505064010620117"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo]" time="0.006395816802978516"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo()]" time="0.002473115921020508"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(goo)]" time="0.002228975296020508"><skipped message="the first positional arg is supposed not to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bae5390&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo)
</system-out><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(&apos;hello&apos;)]" time="0.0017719268798828125"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.002134561538696289"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(replacement=goo)]" time="0.003557443618774414"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.003075122833251953"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.0029630661010742188"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.002763509750366211"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bae9c50&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0028083324432373047"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0031239986419677734"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9baefe10&gt;</skipped><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt(dummy=DEFAULT_DUMMY_VALUE, replacement=None)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0017080307006835938"><system-out>Generated decorator : replace_by_foo(dummy=12, replacement=None)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo]" time="0.004339933395385742"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo()]" time="0.0031867027282714844"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(goo)]" time="0.0021562576293945312"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo)
Expected ERROR: &apos;NotADecoratorError&apos; because No explicit exception is raised but since a double-call is made, user will probably realize that something is wrong

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(&apos;hello&apos;)]" time="0.0030379295349121094"><skipped message="the first positional arg is supposed to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bb2e2b0&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0033605098724365234"><skipped message="the first positional arg is supposed to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9baf18d0&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(replacement=goo)]" time="0.003293275833129883"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.001890420913696289"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.003221750259399414"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.00313568115234375"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.002830028533935547"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9baf6668&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.0033197402954101562"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[unprotected (default)_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0016241073608398438"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bafa7b8&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo]" time="0.005841493606567383"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo()]" time="0.0026383399963378906"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(goo)]" time="0.006192445755004883"><system-out>
Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(&apos;hello&apos;)]" time="0.001745462417602539"><skipped message="the first positional arg is supposed to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9ba85278&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.0032935142517089844"><skipped message="the first positional arg is supposed to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bceb940&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(replacement=goo)]" time="0.0031003952026367188"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0018277168273925781"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.002881765365600586"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0038466453552246094"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.003784656524658203"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9ba8c128&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.003111600875854492"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[introspection_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.0014815330505371094"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9bceb748&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo]" time="0.0027549266815185547"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo()]" time="0.0036461353302001953"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo()
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(goo)]" time="0.0027952194213867188"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(&apos;hello&apos;)]" time="0.0018019676208496094"><skipped message="the first positional arg is supposed to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9ba94048&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(DEFAULT_DUMMY_VALUE)]" time="0.003349781036376953"><skipped message="the first positional arg is supposed to be the callable here" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9ba904e0&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(replacement=goo)]" time="0.0031888484954833984"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(replacement=goo)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(dummy=&apos;hello&apos;)]" time="0.0031566619873046875"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(dummy=&apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)]" time="0.003309965133666992"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(dummy=DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(goo, &apos;hello&apos;)]" time="0.0028820037841796875"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo, &apos;hello&apos;)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(&apos;hello&apos;, goo)]" time="0.0020666122436523438"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9ba99898&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(&apos;hello&apos;, goo)
</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(goo, DEFAULT_DUMMY_VALUE)]" time="0.004021406173706055"><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(goo, DEFAULT_DUMMY_VALUE)
Expected SUCCESS

</system-out></testcase><testcase classname="decopatch.tests.test_main2" file="decopatch/tests/test_main2.py" line="391" name="test_all[custom_disambiguator_2opt_callable_first(replacement=None, dummy=DEFAULT_DUMMY_VALUE)-@replace_by_foo(DEFAULT_DUMMY_VALUE, goo)]" time="0.004230022430419922"><skipped message="the order of positional args in the test does not match" type="pytest.skip">/home/travis/build/smarie/python-decopatch/decopatch/tests/test_main2.py:409: &lt;py._xmlgen.raw object at 0x7fdc9ba992b0&gt;</skipped><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out><system-out>Generated decorator : replace_by_foo(replacement=None, dummy=12)
Calling it as @replace_by_foo(DEFAULT_DUMMY_VALUE, goo)
</system-out></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="15" name="test_so_flat" time="0.0024280548095703125"><system-out>hello from before run
a -1 b 2
hello from before run
a 100 b 2
</system-out></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="40" name="test_so_double_flat" time="0.0016794204711914062"><system-out>hello from before run
a -1 b 2
hello from before run
a 100 b 2
</system-out></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="62" name="test_so_wrap[style=flat]" time="0.00208282470703125"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="62" name="test_so_wrap[style=double-flat]" time="0.0030536651611328125"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="100" name="test_so_2[mode=flat]" time="0.0029816627502441406"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="100" name="test_so_2[mode=double-flat]" time="0.0018105506896972656"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="144" name="test_so_3[mode=flat]" time="0.0033555030822753906"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="144" name="test_so_3[mode=double-flat]" time="0.0024535655975341797"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="189" name="test_so_4[mode=None]" time="0.004411935806274414"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="189" name="test_so_4[mode=flat]" time="0.004799842834472656"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="309" name="test_so_5[mode=no-deco]" time="0.0030519962310791016"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="309" name="test_so_5[mode=None]" time="0.0029375553131103516"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="309" name="test_so_5[mode=flat]" time="0.003624439239501953"></testcase><testcase classname="decopatch.tests.test_so" file="decopatch/tests/test_so.py" line="387" name="test_so_6" time="0.003992795944213867"></testcase></testsuite>